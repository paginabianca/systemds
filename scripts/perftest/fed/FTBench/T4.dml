#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# FTBench T4 (Criteo Bin,RC,Scale dataset)

# Scale a subset of columns
columnsScale = function(Matrix[Double] X)
return (Matrix[Double] X_scaled)
{
  mask = matrix(0, 1, ncol(X));
  mask[,15:40] = matrix(1, 1, 26); #columns to scale
  # Separate and scale columns in mask
  X2 = removeEmpty(target=X, margin="cols", select=t(mask));
  scaled = scale(X=X2);
  #scaled = scaleMinMax(X2);
  # Merge back the scaled columns in right positions
  notMask = mask != 1;
  X_scaled = X*notMask + scaled %*% removeEmpty(target=diag(t(mask)), margin="rows");
}

# Read the input file with dimensions 10M x 40
# NOTE: UMM reduces 10sec for each transformencode call
data = read($data, data_type="frame", format="csv", header=FALSE);
jspec = read($spec_file, data_type="scalar", value_type="string");
#jspec = read("file:/home/aphani/datasets/criteo_norm2.json", data_type="scalar", value_type="string");

print(sum(as.matrix(data[,1]))); #initiate read
lim = 10; #10
R = matrix(0, rows=lim, cols=1);
for (i in 1:lim) {
  print("INFO: starting transformencode");
  t1 = time();
  [X_enc, M] = transformencode(target=data, spec=jspec);
  X_enc = columnsScale(X_enc);
  t2 = time();
  R[i,1] = floor((t2-t1)/1000000);
  print("Elapsed time for transformations using SystemDS = "+floor((t2-t1)/1000000)+" millsec");
}

R = order(target=R, by=1);
res = R[1:5,];
write(res, $target, format="csv", sep="\t");

#print("("+nrow(X_norm)+", "+ncol(X_norm)+")");
print("("+nrow(X_enc)+", "+ncol(X_enc)+")");
